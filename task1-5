def hello(x=None):
    if x is None or x == '':
        return "Hello!"
    else:
        return f"Hello, {x}!"

def int_to_roman(x):
    if x < 1 or x > 3999:
        return "Число должно быть в диапазоне от 1 до 3999"
    else:
      val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
      syb = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
      
      roman_num = ""
      i = 0
      while i < len(val):
          while x >= val[i]:
              roman_num += syb[i]
              x -= val[i]
          i += 1
      return roman_num

def longest_common_prefix(x):
    if not x:
        return ""
    
    x = [s.lstrip() for s in x]
    
    min_len = min(len(s) for s in x)
    
    for i in range(min_len):
        if all(s[i] == x[0][i] for s in x):
            continue
        else:
            return x[0][:i]
    
    return x[0][:min_len]


def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

class BankCard: 
    def __init__(self, total_sum, balance_limit=None): 
        if total_sum < 0: 
            raise ValueError("Initial total_sum must be non-negative.") 
        if balance_limit is not None and (not isinstance(balance_limit, int) or balance_limit <= 0): 
            raise ValueError("Balance limit must be a positive integer.") 
         
        self.total_sum = total_sum 
        self.balance_limit = balance_limit
 
    def __call__(self, sum_spent): 
        if sum_spent <= 0: 
            raise ValueError("Invalid amount to spend.") 
         
        if sum_spent > self.total_sum: 
            raise ValueError(f"Not enough money to spend {sum_spent} dollars.") 
         
        self.total_sum -= sum_spent 
        print(f"You spent {sum_spent} dollars.") 
         
    def __str__(self): 
        return "To learn the balance call balance." 
    
    @property 
    def balance(self): 
        if self.balance_limit is not None and self.balance_limit <= 0: 
            raise ValueError("Balance check limits exceeded.") 
         
        if self.balance_limit is not None: 
            self.balance_limit -= 1 
         
        return self.total_sum 
 
    def put(self, sum_put): 
        if sum_put <= 0: 
            raise ValueError("Invalid amount to put.") 
         
        self.total_sum += sum_put 
        print(f"You put {sum_put} dollars.") 
 
    def __add__(self, other): 
        if not isinstance(other, BankCard): 
            raise ValueError("Unsupported operand type for +: BankCard and non-BankCard") 
         
        new_total_sum = self.total_sum + other.total_sum 
        new_balance_limit = max(self.balance_limit, other.balance_limit) if self.balance_limit is not None and other.balance_limit is not None else None 
         
        return BankCard(new_total_sum, new_balance_limit)
